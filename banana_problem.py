# -*- coding: utf-8 -*-
"""Banana_problem.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1f8TCk1ibRgG4GNBPv0hkfQZ6dqYfpuxJ
"""

# Step 1: Import libraries
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score, roc_auc_score, classification_report

import pandas as pd

# Step 1: Load your CSV
df = pd.read_csv("/content/Shipment_Delivery_Dataset_Large.csv")

# Show first 5 rows
df.head()

# Step 2: Clean and preprocess data
import numpy as np
from sklearn.preprocessing import LabelEncoder

# Check for missing values
print(df.isnull().sum())

# Fill missing numeric values (like Driver_Experience_Years) with median
df['Driver_Experience_Years'] = df['Driver_Experience_Years'].fillna(df['Driver_Experience_Years'].median())

# Encode categorical columns
cat_cols = ['Origin', 'Destination', 'Vehicle_Type', 'Weather']
le = LabelEncoder()
for col in cat_cols:
    df[col] = le.fit_transform(df[col])

# Double-check cleaned data
df.head()

# Step 3: Separate features (X) and target (y)
X = df[['Distance_km', 'Vehicle_Type', 'Route_Traffic_Index', 'Weather',
        'Driver_Experience_Years', 'Scheduled_Delivery_Hours', 'Actual_Delivery_Hours']]
y = df['Delayed']

# Step 4: Split into training and testing sets
from sklearn.model_selection import train_test_split

X_train, X_test, y_train, y_test = train_test_split(
    X, y, test_size=0.2, random_state=42
)

# Step 5: Train Logistic Regression model
from sklearn.linear_model import LogisticRegression

model = LogisticRegression(max_iter=1000)
model.fit(X_train, y_train)

# Step 6: Evaluate model
from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score, roc_auc_score, classification_report

y_pred = model.predict(X_test)

acc = accuracy_score(y_test, y_pred)
prec = precision_score(y_test, y_pred)
rec = recall_score(y_test, y_pred)
f1 = f1_score(y_test, y_pred)
roc = roc_auc_score(y_test, y_pred)

print(f"Accuracy: {acc:.2f}")
print(f"Precision: {prec:.2f}")
print(f"Recall: {rec:.2f}")
print(f"F1-Score: {f1:.2f}")
print(f"ROC-AUC: {roc:.2f}")

print("\nClassification Report:\n", classification_report(y_test, y_pred))

# Step 7: Feature importance (coefficients)
import matplotlib.pyplot as plt
import seaborn as sns

importance = pd.Series(model.coef_[0], index=X.columns).sort_values(ascending=False)
sns.barplot(x=importance, y=importance.index)
plt.title('Feature Importance')
plt.show()

# Step 8: Predict delays and save CSV
df['Predicted_Delay'] = model.predict(X)
result = df[['Shipment_ID', 'Predicted_Delay']]
result.to_csv("Predicted_Delays.csv", index=False)
print("âœ… Predictions saved as Predicted_Delays.csv")

# Preview
result.head()

